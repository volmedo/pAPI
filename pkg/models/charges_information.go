// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChargesInformation charges information
// swagger:model ChargesInformation
type ChargesInformation struct {

	// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	// Enum: [DEBT CRED SHAR SLEV]
	BearerCode string `json:"bearer_code,omitempty"`

	// Transaction charges due to the receiver of the transaction.
	ReceiverChargesAmount Amount `json:"receiver_charges_amount,omitempty"`

	// receiver charges currency
	ReceiverChargesCurrency Currency `json:"receiver_charges_currency,omitempty"`

	// sender charges
	SenderCharges []*ChargesInformationSenderChargesItems0 `json:"sender_charges"`
}

// Validate validates this charges information
func (m *ChargesInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBearerCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverChargesAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiverChargesCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSenderCharges(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chargesInformationTypeBearerCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEBT","CRED","SHAR","SLEV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chargesInformationTypeBearerCodePropEnum = append(chargesInformationTypeBearerCodePropEnum, v)
	}
}

const (

	// ChargesInformationBearerCodeDEBT captures enum value "DEBT"
	ChargesInformationBearerCodeDEBT string = "DEBT"

	// ChargesInformationBearerCodeCRED captures enum value "CRED"
	ChargesInformationBearerCodeCRED string = "CRED"

	// ChargesInformationBearerCodeSHAR captures enum value "SHAR"
	ChargesInformationBearerCodeSHAR string = "SHAR"

	// ChargesInformationBearerCodeSLEV captures enum value "SLEV"
	ChargesInformationBearerCodeSLEV string = "SLEV"
)

// prop value enum
func (m *ChargesInformation) validateBearerCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chargesInformationTypeBearerCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChargesInformation) validateBearerCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BearerCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBearerCodeEnum("bearer_code", "body", m.BearerCode); err != nil {
		return err
	}

	return nil
}

func (m *ChargesInformation) validateReceiverChargesAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiverChargesAmount) { // not required
		return nil
	}

	if err := m.ReceiverChargesAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiver_charges_amount")
		}
		return err
	}

	return nil
}

func (m *ChargesInformation) validateReceiverChargesCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiverChargesCurrency) { // not required
		return nil
	}

	if err := m.ReceiverChargesCurrency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("receiver_charges_currency")
		}
		return err
	}

	return nil
}

func (m *ChargesInformation) validateSenderCharges(formats strfmt.Registry) error {

	if swag.IsZero(m.SenderCharges) { // not required
		return nil
	}

	for i := 0; i < len(m.SenderCharges); i++ {
		if swag.IsZero(m.SenderCharges[i]) { // not required
			continue
		}

		if m.SenderCharges[i] != nil {
			if err := m.SenderCharges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sender_charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargesInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargesInformation) UnmarshalBinary(b []byte) error {
	var res ChargesInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ChargesInformationSenderChargesItems0 List of transaction charges due to the sender of the transaction
// swagger:model ChargesInformationSenderChargesItems0
type ChargesInformationSenderChargesItems0 struct {

	// Amount of each transaction charge due to the sender of the transaction.
	Amount Amount `json:"amount,omitempty"`

	// currency
	Currency Currency `json:"currency,omitempty"`
}

// Validate validates this charges information sender charges items0
func (m *ChargesInformationSenderChargesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargesInformationSenderChargesItems0) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *ChargesInformationSenderChargesItems0) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currency")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargesInformationSenderChargesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargesInformationSenderChargesItems0) UnmarshalBinary(b []byte) error {
	var res ChargesInformationSenderChargesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
