// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentParty payment party
// swagger:model PaymentParty
type PaymentParty struct {

	// Name of beneficiary/debtor as given with account
	AccountName string `json:"account_name,omitempty"`

	// account number
	AccountNumber AccountNumber `json:"account_number,omitempty"`

	// The type of identification given at `account_number` attribute
	// Enum: [IBAN BBAN]
	AccountNumberCode string `json:"account_number_code,omitempty"`

	// The type of the account given with account_number. Single digit number. Only required if requested by the beneficiary party. Defaults to 0.
	AccountType int64 `json:"account_type,omitempty"`

	// Beneficiary/debtor address
	Address string `json:"address,omitempty"`

	// bank id
	BankID BankID `json:"bank_id,omitempty"`

	// bank id code
	BankIDCode BankIDCode `json:"bank_id_code,omitempty"`

	// Beneficiary/debtor name
	Name string `json:"name,omitempty"`
}

// Validate validates this payment party
func (m *PaymentParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentParty) validateAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumber) { // not required
		return nil
	}

	if err := m.AccountNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("account_number")
		}
		return err
	}

	return nil
}

var paymentPartyTypeAccountNumberCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IBAN","BBAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentPartyTypeAccountNumberCodePropEnum = append(paymentPartyTypeAccountNumberCodePropEnum, v)
	}
}

const (

	// PaymentPartyAccountNumberCodeIBAN captures enum value "IBAN"
	PaymentPartyAccountNumberCodeIBAN string = "IBAN"

	// PaymentPartyAccountNumberCodeBBAN captures enum value "BBAN"
	PaymentPartyAccountNumberCodeBBAN string = "BBAN"
)

// prop value enum
func (m *PaymentParty) validateAccountNumberCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentPartyTypeAccountNumberCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentParty) validateAccountNumberCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumberCode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccountNumberCodeEnum("account_number_code", "body", m.AccountNumberCode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentParty) validateBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.BankID) { // not required
		return nil
	}

	if err := m.BankID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bank_id")
		}
		return err
	}

	return nil
}

func (m *PaymentParty) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := m.BankIDCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bank_id_code")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentParty) UnmarshalBinary(b []byte) error {
	var res PaymentParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
