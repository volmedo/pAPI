// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment payment
// swagger:model Payment
type Payment struct {

	// attributes
	// Required: true
	Attributes *PaymentAttributes `json:"attributes"`

	// Unique resource ID
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Payment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentAttributes payment attributes
// swagger:model PaymentAttributes
type PaymentAttributes struct {

	// Amount of money moved between the instructing agent and instructed agent
	Amount Amount `json:"amount,omitempty"`

	// beneficiary party
	BeneficiaryParty *PaymentParty `json:"beneficiary_party,omitempty"`

	// charges information
	ChargesInformation *ChargesInformation `json:"charges_information,omitempty"`

	// currency
	Currency Currency `json:"currency,omitempty"`

	// debtor party
	DebtorParty *PaymentParty `json:"debtor_party,omitempty"`

	// Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
	EndToEndReference string `json:"end_to_end_reference,omitempty"`

	// fx
	Fx *PaymentAttributesFx `json:"fx,omitempty"`

	// Numeric reference field, see scheme specific descriptions for usage
	NumericReference string `json:"numeric_reference,omitempty"`

	// Payment identification (legacy?)
	PaymentID string `json:"payment_id,omitempty"`

	// Purpose of the payment in a proprietary form
	PaymentPurpose string `json:"payment_purpose,omitempty"`

	// Clearing infrastructure through which the payment instruction is to be processed. Default for given organisation ID is used if left empty. Currently only FPS is supported.
	// Enum: [FPS]
	PaymentScheme string `json:"payment_scheme,omitempty"`

	// payment type
	// Enum: [Credit]
	PaymentType string `json:"payment_type,omitempty"`

	// Date on which the payment is to be debited from the debtor account. Formatted according to ISO 8601 format YYYY-MM-DD.
	// Format: date
	ProcessingDate strfmt.Date `json:"processing_date,omitempty"`

	// Payment reference for beneficiary use
	Reference string `json:"reference,omitempty"`

	// The scheme specific payment sub type
	// Enum: [TelephoneBanking InternetBanking BranchInstruction Letter Email MobilePaymentsService]
	SchemePaymentSubType string `json:"scheme_payment_sub_type,omitempty"`

	// The scheme-specific payment type
	// Enum: [ImmediatePayment ForwardDatedPayment StandingOrder]
	SchemePaymentType string `json:"scheme_payment_type,omitempty"`

	// sponsor party
	SponsorParty *PaymentAttributesSponsorParty `json:"sponsor_party,omitempty"`
}

// Validate validates this payment attributes
func (m *PaymentAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiaryParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargesInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemePaymentSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSponsorParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributes) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "amount")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateBeneficiaryParty(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryParty) { // not required
		return nil
	}

	if m.BeneficiaryParty != nil {
		if err := m.BeneficiaryParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "beneficiary_party")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateChargesInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargesInformation) { // not required
		return nil
	}

	if m.ChargesInformation != nil {
		if err := m.ChargesInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "charges_information")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "currency")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorParty) { // not required
		return nil
	}

	if m.DebtorParty != nil {
		if err := m.DebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "debtor_party")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateFx(formats strfmt.Registry) error {

	if swag.IsZero(m.Fx) { // not required
		return nil
	}

	if m.Fx != nil {
		if err := m.Fx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "fx")
			}
			return err
		}
	}

	return nil
}

var paymentAttributesTypePaymentSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAttributesTypePaymentSchemePropEnum = append(paymentAttributesTypePaymentSchemePropEnum, v)
	}
}

const (

	// PaymentAttributesPaymentSchemeFPS captures enum value "FPS"
	PaymentAttributesPaymentSchemeFPS string = "FPS"
)

// prop value enum
func (m *PaymentAttributes) validatePaymentSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentAttributesTypePaymentSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentSchemeEnum("attributes"+"."+"payment_scheme", "body", m.PaymentScheme); err != nil {
		return err
	}

	return nil
}

var paymentAttributesTypePaymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Credit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAttributesTypePaymentTypePropEnum = append(paymentAttributesTypePaymentTypePropEnum, v)
	}
}

const (

	// PaymentAttributesPaymentTypeCredit captures enum value "Credit"
	PaymentAttributesPaymentTypeCredit string = "Credit"
)

// prop value enum
func (m *PaymentAttributes) validatePaymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentAttributesTypePaymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentAttributes) validatePaymentType(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePaymentTypeEnum("attributes"+"."+"payment_type", "body", m.PaymentType); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"processing_date", "body", "date", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentAttributesTypeSchemePaymentSubTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TelephoneBanking","InternetBanking","BranchInstruction","Letter","Email","MobilePaymentsService"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAttributesTypeSchemePaymentSubTypePropEnum = append(paymentAttributesTypeSchemePaymentSubTypePropEnum, v)
	}
}

const (

	// PaymentAttributesSchemePaymentSubTypeTelephoneBanking captures enum value "TelephoneBanking"
	PaymentAttributesSchemePaymentSubTypeTelephoneBanking string = "TelephoneBanking"

	// PaymentAttributesSchemePaymentSubTypeInternetBanking captures enum value "InternetBanking"
	PaymentAttributesSchemePaymentSubTypeInternetBanking string = "InternetBanking"

	// PaymentAttributesSchemePaymentSubTypeBranchInstruction captures enum value "BranchInstruction"
	PaymentAttributesSchemePaymentSubTypeBranchInstruction string = "BranchInstruction"

	// PaymentAttributesSchemePaymentSubTypeLetter captures enum value "Letter"
	PaymentAttributesSchemePaymentSubTypeLetter string = "Letter"

	// PaymentAttributesSchemePaymentSubTypeEmail captures enum value "Email"
	PaymentAttributesSchemePaymentSubTypeEmail string = "Email"

	// PaymentAttributesSchemePaymentSubTypeMobilePaymentsService captures enum value "MobilePaymentsService"
	PaymentAttributesSchemePaymentSubTypeMobilePaymentsService string = "MobilePaymentsService"
)

// prop value enum
func (m *PaymentAttributes) validateSchemePaymentSubTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentAttributesTypeSchemePaymentSubTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentAttributes) validateSchemePaymentSubType(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemePaymentSubType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchemePaymentSubTypeEnum("attributes"+"."+"scheme_payment_sub_type", "body", m.SchemePaymentSubType); err != nil {
		return err
	}

	return nil
}

var paymentAttributesTypeSchemePaymentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ImmediatePayment","ForwardDatedPayment","StandingOrder"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentAttributesTypeSchemePaymentTypePropEnum = append(paymentAttributesTypeSchemePaymentTypePropEnum, v)
	}
}

const (

	// PaymentAttributesSchemePaymentTypeImmediatePayment captures enum value "ImmediatePayment"
	PaymentAttributesSchemePaymentTypeImmediatePayment string = "ImmediatePayment"

	// PaymentAttributesSchemePaymentTypeForwardDatedPayment captures enum value "ForwardDatedPayment"
	PaymentAttributesSchemePaymentTypeForwardDatedPayment string = "ForwardDatedPayment"

	// PaymentAttributesSchemePaymentTypeStandingOrder captures enum value "StandingOrder"
	PaymentAttributesSchemePaymentTypeStandingOrder string = "StandingOrder"
)

// prop value enum
func (m *PaymentAttributes) validateSchemePaymentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentAttributesTypeSchemePaymentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentAttributes) validateSchemePaymentType(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemePaymentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSchemePaymentTypeEnum("attributes"+"."+"scheme_payment_type", "body", m.SchemePaymentType); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateSponsorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.SponsorParty) { // not required
		return nil
	}

	if m.SponsorParty != nil {
		if err := m.SponsorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "sponsor_party")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributes) UnmarshalBinary(b []byte) error {
	var res PaymentAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentAttributesFx payment attributes fx
// swagger:model PaymentAttributesFx
type PaymentAttributesFx struct {

	// Reference to the foreign exchange contract associated with the transaction
	ContractReference string `json:"contract_reference,omitempty"`

	// Factor used to convert an amount from the instructed currency into the transaction currency. Decimal value, represented as a string, maximum length 12. Must be > 0.
	ExchangeRate string `json:"exchange_rate,omitempty"`

	// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as instructed by the initiating party. Decimal value. Must be > 0.
	OriginalAmount Amount `json:"original_amount,omitempty"`

	// Currency of `orginal_amount`.
	OriginalCurrency Currency `json:"original_currency,omitempty"`
}

// Validate validates this payment attributes fx
func (m *PaymentAttributesFx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributesFx) validateOriginalAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginalAmount) { // not required
		return nil
	}

	if err := m.OriginalAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "fx" + "." + "original_amount")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributesFx) validateOriginalCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginalCurrency) { // not required
		return nil
	}

	if err := m.OriginalCurrency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "fx" + "." + "original_currency")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesFx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesFx) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesFx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentAttributesSponsorParty Sponsor party
// swagger:model PaymentAttributesSponsorParty
type PaymentAttributesSponsorParty struct {

	// account number
	AccountNumber AccountNumber `json:"account_number,omitempty"`

	// bank id
	BankID BankID `json:"bank_id,omitempty"`

	// bank id code
	BankIDCode BankIDCode `json:"bank_id_code,omitempty"`
}

// Validate validates this payment attributes sponsor party
func (m *PaymentAttributesSponsorParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributesSponsorParty) validateAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumber) { // not required
		return nil
	}

	if err := m.AccountNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "sponsor_party" + "." + "account_number")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributesSponsorParty) validateBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.BankID) { // not required
		return nil
	}

	if err := m.BankID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "sponsor_party" + "." + "bank_id")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributesSponsorParty) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := m.BankIDCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "sponsor_party" + "." + "bank_id_code")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesSponsorParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesSponsorParty) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesSponsorParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
